<!DOCTYPE html>
<html>
    <head>
        <title><%= title %></title>
        <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css"
                xintegrity="sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS" crossorigin="anonymous">
        <link rel='stylesheet' href='/stylesheets/style.css' /> <!-- カスタムCSSを読み込む -->
        <!-- Font Awesome for icons -->
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    </head>
    <body>
        <%- include('./header'); %>
        
        <div class="auth-wrapper">
            <div class="auth-card">
                <h2 class="auth-title">タスク編集</h2>
                <%- include('./error_messages'); %> <!-- エラーメッセージ表示 -->
                <form action="/tasks/edit/<%= task.id %>" method="post" class="auth-form" id="editTaskForm">
                    <div class="form-group">
                        <label for="content">タスク名</label>
                        <input required type="text" name="content" id="content" class="form-control" value="<%= task.content %>"/>
                    </div>
                    <div class="form-group">
                        <label for="duedatetime">期限</label>
                        <input type="datetime-local" name="duedatetime" id="duedatetime" class="form-control" value="<%= task.duedatetime_input_format %>"/>
                    </div>
                    <div class="form-group">
                        <label for="description">説明</label>
                        <textarea name="description" id="description" class="form-control" rows="3"><%= task.description || '' %></textarea>
                    </div>

                    <!-- タグ選択フィールドの追加 (新しいUI) -->
                    <div class="form-group tag-selection-area">
                        <label>タグを選択</label>
                        <div id="availableTagsContainer" class="available-tags-container mb-2">
                            <!-- 利用可能なタグがここに動的に追加される -->
                        </div>
                        <div id="selectedTagsContainer" class="selected-tags-container">
                            <!-- 選択されたタグがここに動的に追加される -->
                        </div>
                        <!-- フォーム送信用の隠しフィールド -->
                        <input type="hidden" name="tags" id="hiddenTagsInput">
                    </div>

                    <input class="btn btn-primary btn-block auth-submit-btn" type="submit" value="更新"/>
                    <a href="/" class="btn btn-secondary btn-block auth-cancel-btn">キャンセル</a> <!-- キャンセルボタン -->
                </form>
            </div>
        </div>

        <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"
                xintegrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo"
                crossorigin="anonymous"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.6/umd/popper.min.js"
                xintegrity="sha384-wHAiFfRlMFy6i5SRaxvfOCifBUQy1xHdJ/yoi7FRNXMRBu5WHdZYu1hA6ZOblgut"
                crossorigin="anonymous"></script>
        <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/js/bootstrap.min.js"
                xintegrity="sha384-B0UglyR+jN6CkvvICOB2joaf5I4l3gm9GU6Hc1og6Ls7i6U/mkkaduKaBhlAXv9k"
                crossorigin="anonymous"></script>
        
        <script>
            document.addEventListener('DOMContentLoaded', function() {
                const availableTagsContainer = document.getElementById('availableTagsContainer');
                const selectedTagsContainer = document.getElementById('selectedTagsContainer');
                const hiddenTagsInput = document.getElementById('hiddenTagsInput');

                let selectedTagIds = new Set(); // 選択されたタグIDを管理するSet

                // EJSから渡されたallTagsデータとtask.selectedTagIdsデータをJavaScript変数に格納
                const allTagsData = <%- JSON.stringify(allTags) %>;
                const initialSelectedTagIds = <%- JSON.stringify(task.selectedTagIds || []) %>;

                // 初期選択されたタグをSetに設定
                initialSelectedTagIds.forEach(id => selectedTagIds.add(id));

                // 利用可能なタグをレンダリングする関数
                function renderAvailableTags() {
                    availableTagsContainer.innerHTML = ''; // コンテナをクリア
                    allTagsData.forEach(tag => {
                        const tagItem = document.createElement('span');
                        tagItem.classList.add('available-tag-item');
                        tagItem.dataset.tagId = tag.id;
                        tagItem.dataset.tagName = tag.name;
                        tagItem.dataset.tagColor = tag.color;
                        tagItem.style.backgroundColor = tag.color;
                        tagItem.style.color = getContrastColor(tag.color);
                        tagItem.textContent = tag.name;

                        // 既に選択されているタグは初期状態でselectedクラスを付与
                        if (selectedTagIds.has(tag.id)) {
                            tagItem.classList.add('selected');
                        }

                        tagItem.addEventListener('click', function() {
                            toggleTagSelection(tag.id, tag.name, tag.color);
                        });
                        availableTagsContainer.appendChild(tagItem);
                    });
                    renderSelectedTags(); // 利用可能なタグをレンダリングした後、選択済みタグも更新
                }

                // 選択済みタグをレンダリングする関数
                function renderSelectedTags() {
                    selectedTagsContainer.innerHTML = ''; // コンテナをクリア
                    selectedTagIds.forEach(tagId => {
                        const tag = allTagsData.find(t => t.id === tagId);
                        if (tag) {
                            addTagToSelection(tag.id, tag.name, tag.color, false); // DOMに追加するが、selectedTagIdsは更新しない
                        }
                    });
                    updateHiddenTagsInput(); // hidden inputを更新
                }

                // タグの選択/非選択を切り替える関数
                function toggleTagSelection(tagId, tagName, tagColor) {
                    const tagIdNum = parseInt(tagId, 10); // Ensure it's a number
                    if (selectedTagIds.has(tagIdNum)) {
                        // 既に選択されている場合は削除
                        removeTagFromSelection(tagIdNum);
                    } else {
                        // 選択されていない場合は追加
                        addTagToSelection(tagIdNum, tagName, tagColor, true); // selectedTagIdsも更新
                    }
                    // 利用可能なタグの表示を更新して、選択状態を反映
                    renderAvailableTags(); // これがrenderSelectedTagsも呼ぶ
                }

                // 選択済みタグを追加する関数
                function addTagToSelection(tagId, tagName, tagColor, updateSet = true) {
                    if (updateSet && selectedTagIds.has(tagId)) {
                        return;
                    }
                    if (updateSet) {
                        selectedTagIds.add(tagId);
                    }

                    const tagItem = document.createElement('span');
                    tagItem.classList.add('selected-tag-item');
                    tagItem.dataset.tagId = tagId; // Store as string
                    tagItem.style.backgroundColor = tagColor;
                    tagItem.style.color = getContrastColor(tagColor);
                    tagItem.innerHTML = `
                        ${tagName}
                        <button type="button" class="remove-tag-btn" data-tag-id="${tagId}">&times;</button>
                    `;
                    selectedTagsContainer.appendChild(tagItem);
                    if (updateSet) {
                        updateHiddenTagsInput();
                    }
                }

                // 選択済みタグを削除する関数
                function removeTagFromSelection(tagId) {
                    selectedTagIds.delete(tagId);
                    const tagItemToRemove = selectedTagsContainer.querySelector(`.selected-tag-item[data-tag-id="${tagId}"]`);
                    if (tagItemToRemove) {
                        selectedTagsContainer.removeChild(tagItemToRemove);
                    }
                    updateHiddenTagsInput();
                }

                // 隠しフィールドを更新する関数
                function updateHiddenTagsInput() {
                    hiddenTagsInput.value = Array.from(selectedTagIds).join(',');
                }

                // ヘルパー関数: 色のコントラストを判断して文字色を返す
                function getContrastColor(hexcolor) {
                    const r = parseInt(hexcolor.substr(1, 2), 16);
                    const g = parseInt(hexcolor.substr(3, 2), 16);
                    const b = parseInt(hexcolor.substr(5, 2), 16);
                    const yiq = ((r * 299) + (g * 587) + (b * 114)) / 1000;
                    return (yiq >= 128) ? 'black' : 'white';
                }

                // 選択済みタグの削除ボタンのイベントリスナー (イベント委譲)
                selectedTagsContainer.addEventListener('click', function(event) {
                    if (event.target.classList.contains('remove-tag-btn')) {
                        const tagId = parseInt(event.target.dataset.tagId, 10);
                        removeTagFromSelection(tagId);
                        renderAvailableTags(); // 利用可能なタグの表示も更新して選択状態を解除
                    }
                });

                // フォーム送信時にhiddenTagsInputを確実に更新
                document.getElementById('editTaskForm').addEventListener('submit', function() {
                    updateHiddenTagsInput();
                });

                // 初期レンダリング
                renderAvailableTags(); // これがrenderSelectedTagsも呼ぶ
            });
        </script>
    </body>
</html>
