<!DOCTYPE html>
<html>
  <head>
    <title><%= title %></title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css" xintegrity="sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj706tWS" crossorigin="anonymous">
    <link rel='stylesheet' href='/stylesheets/style.css' />
    <!-- Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
  </head>
  <body>
    <%- include('./header'); %>

    <div class="main-content-wrapper"> <!-- Overall wrapper for messages and main content -->
      <!-- Display error/success messages -->
      <%- include('./error_messages'); %>

      <% if(isAuth) { %>
        <div class="main-container">
          <!-- Left panel: Task list and add form -->
          <div class="left-panel">
            <div class="greet">
              <h1>ようこそ、<%= username %>さん！</h1>
              <h1>タスクを追加しよう！</h1>
            </div>
            <div class="task-add-section">
              <form action="/" method="post" id="addTaskForm">
                <div class="form-group">
                  <label for="add">タスクの追加</label>
                  <input required type="text" name="add" id="add" placeholder="何をする？" class="form-control"/>
                </div>
                <div class="form-group">
                  <label for="duedatetime">期限</label>
                  <input type="datetime-local" name="duedatetime" id="duedatetime" placeholder="期限" class="form-control">
                </div>
                <div class="form-group">
                  <label for="description">説明</label>
                  <input type="text" name="description" id="description" placeholder="説明を追加" class="form-control">
                </div>
                
                <!-- Tag selection field (New UI) -->
                <div class="form-group tag-selection-area">
                  <label>タグを選択</label>
                  <div id="availableTagsContainer" class="available-tags-container mb-2">
                    <!-- Available tags will be dynamically added here -->
                  </div>
                  <div id="selectedTagsContainer" class="selected-tags-container">
                    <!-- Selected tags will be dynamically added here -->
                  </div>
                  <!-- Hidden field for form submission -->
                  <input type="hidden" name="tags" id="hiddenTagsInput">
                </div>

                <input type="submit" value="追加" class="btn btn-primary"/>
              </form>
            </div>
            <div class="task-list-section">
              <h3>タスク一覧</h3>
              <!-- Tag filter UI -->
              <div class="tag-filter-section">
                <p>タグで絞り込み:</p>
                <a href="/" class="tag-filter-btn <%= !query.tag ? 'active' : '' %>">全て</a>
                <% allTags.forEach(tag => { %>
                  <a href="/?tag=<%= tag.id %>" class="tag-filter-btn" style="background-color: <%= tag.color %>; <%= query.tag == tag.id ? 'border: 2px solid #3498db;' : '' %>">
                    <%= tag.name %>
                  </a>
                <% }); %>
                <a href="/tags" class="btn btn-sm btn-outline-secondary ml-2">タグ管理</a>
              </div>

              <ul id="all-tasks-list">
                <% if (todos.length === 0) { %>
                  <p class="no-tasks-message">表示するタスクがありません。</p>
                <% } %>
                <% for(let todo of todos){ %>
                  <li class="todo-item <%= todo.done === 1 ? 'completed-task' : '' %>
                                    <%= todo.isOverdue ? 'overdue-task' : '' %>
                                    <%= todo.isDueSoon ? 'due-soon-task' : '' %>"
                      data-task-id="<%= todo.id %>"
                      data-task-content="<%= todo.content %>"
                      data-task-is-due-soon="<%= todo.isDueSoon %>"
                      data-task-is-overdue="<%= todo.isOverdue %>"
                      data-due-date="<%= todo.duedatetime ? new Date(todo.duedatetime).toISOString().split('T')[0] : '' %>"
                      data-is-completed="<%= todo.done === 1 %>">
                    <!-- Toggle button display based on 'done' value -->
                    <% if (todo.done === 0) { %>
                      <!-- If incomplete: Complete button -->
                      <form action="/tasks/complete/<%= todo.id %>" method="POST" class="todo-action-form">
                        <button type="submit" class="todo-action-button complete-btn">
                          完了
                        </button>
                      </form>
                    <% } else if (todo.done === 1) { %>
                      <!-- If completed: Revert button -->
                      <form action="/tasks/revert/<%= todo.id %>" method="POST" class="todo-action-form">
                        <button type="submit" class="todo-action-button revert-btn">
                          戻す
                        </button>
                      </form>
                    <% } %>

                    <!-- Task content (center) -->
                    <div class="todo-content">
                        <span><%= todo.content %></span>
                        <% if (todo.duedatetime_formatted) { %>
                            <p class="duedate <%= todo.isOverdue ? 'overdue-text' : '' %>
                                            <%= todo.isDueSoon ? 'due-soon-text' : '' %>">
                                <% if (todo.isOverdue) { %>
                                    <i class="fas fa-exclamation-triangle warning-icon"></i> <!-- Overdue icon -->
                                <% } else if (todo.isDueSoon) { %>
                                    <i class="fas fa-clock warning-icon"></i> <!-- Due soon icon -->
                                <% } %>
                                期限: <%= todo.duedatetime_formatted %>
                            </p>
                        <% } %>
                        <% if (todo.description) { %>
                            <p><%= todo.description %></p>
                        <% } %>
                        <!-- Display tags (back to previous badge style) -->
                        <div class="task-tags-display">
                          <% todo.tags.forEach(tag => { %>
                            <span class="tag-badge" style="background-color: <%= tag.color %>;">
                              <%= tag.name %>
                            </span>
                          <% }); %>
                        </div>
                    </div>

                    <!-- "Edit" and "Delete" buttons on the right -->
                    <div class="task-actions">
                      <a href="/tasks/edit/<%= todo.id %>" class="todo-action-button edit-btn">編集</a>
                      <form action="/tasks/delete/<%= todo.id %>" method="POST" class="todo-action-form">
                          <button type="submit" class="todo-action-button delete-btn">
                              削除
                          </button>
                      </form>
                    </div>
                  </li>
                <% } %>
              </ul>
            </div>
          </div>

          <!-- Right panel: Calendar and tasks for selected date -->
          <div class="right-panel">
            <div class="calendar-container">
              <div class="calendar-header">
                <button id="prevMonth" class="calendar-nav-btn"><i class="fas fa-chevron-left"></i></button>
                <h2 id="currentMonthYear"></h2>
                <button id="nextMonth" class="calendar-nav-btn"><i class="fas fa-chevron-right"></i></button>
              </div>
              <div class="calendar-weekdays">
                <div>日</div><div>月</div><div>火</div><div>水</div><div>木</div><div>金</div><div>土</div>
              </div>
              <div id="calendarGrid" class="calendar-grid">
                <!-- Calendar dates will be generated by JavaScript -->
              </div>
            </div>

            <div class="selected-date-tasks-container">
              <h3 id="selectedDateHeader"></h3>
              <ul id="selectedDateTasksList">
                <!-- Tasks for the selected date will be displayed by JavaScript -->
              </ul>
              <p id="noTasksMessage" class="no-tasks-message" style="display: none;">この日にはタスクがありません。</p>
            </div>
          </div>
        </div>
      <% } else { %>
        <!-- Welcome message when not logged in -->
        <div class="container text-center mt-5">
          <h1>ToDoアプリへようこそ！</h1>
          <p class="lead">タスクを管理して、日々の生産性を向上させましょう。</p>
          <p>今すぐサインアップして、始めましょう！</p>
        </div>
      <% } %>
    </div> <!-- End of main-content-wrapper -->

    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" xintegrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.6/umd/popper.min.js" xintegrity="sha384-wHAiFfRlMFy6i5SRaxvfOCifBUQy1xHdJ/yoi7FRNXMRBu5WHdZYu1hA6ZOblgut" crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/js/bootstrap.min.js" xintegrity="sha384-B0UglyR+jN6CkvvICOB2joaf5I4l3gm9GU6Hc1og6Ls7i6U/mkkaduKaBhlAXv9k" crossorigin="anonymous"></script>

    <script>
      document.addEventListener('DOMContentLoaded', function() {
        // --- Notification JavaScript (existing code) ---
        const NOTIFICATION_HISTORY_KEY = 'todo_notification_history';

        function getNotificationHistory() {
          try {
            const history = localStorage.getItem(NOTIFICATION_HISTORY_KEY);
            return history ? JSON.parse(history) : {};
          } catch (e) {
            console.error('Failed to parse notification history from localStorage:', e);
            return {};
          }
        }

        function saveNotificationHistory(history) {
          try {
            localStorage.setItem(NOTIFICATION_HISTORY_KEY, JSON.stringify(history));
          } catch (e) {
            console.error('Failed to save notification history to localStorage:', e);
          }
        }

        function sendNotification(taskId, title, body) {
          if (!("Notification" in window)) {
            console.warn("このブラウザはデスクトップ通知をサポートしていません。");
            return;
          }

          if (Notification.permission === "default") {
            Notification.requestPermission().then(permission => {
              if (permission === "granted") {
                new Notification(title, { body: body, icon: '/images/todo-icon.png' });
                markTaskAsNotified(taskId);
              } else {
                console.warn("デスクトップ通知が拒否されました。");
              }
            });
          } else if (Notification.permission === "granted") {
            new Notification(title, { body: body, icon: '/images/todo-icon.png' });
            markTaskAsNotified(taskId);
          } else {
            console.warn("デスクトップ通知がブロックされています。ブラウザの設定を確認してください。");
          }
        }

        function markTaskAsNotified(taskId) {
          const history = getNotificationHistory();
          history[taskId] = true;
          saveNotificationHistory(history);
        }

        function hasTaskBeenNotified(taskId) {
          const history = getNotificationHistory();
          return history[taskId] === true;
        }

        function checkAndNotifyTasks() {
          const taskItems = document.querySelectorAll('li.todo-item');
          taskItems.forEach(item => {
            const taskId = item.dataset.taskId;
            const taskContent = item.dataset.taskContent;
            const isDueSoon = item.dataset.taskIsDueSoon === 'true';
            const isOverdue = item.dataset.taskIsOverdue === 'true';
            const isCompleted = item.dataset.isCompleted === 'true'; // Get from dataset

            if (isCompleted || hasTaskBeenNotified(taskId)) {
              return;
            }

            let notificationTitle = '';
            let notificationBody = '';

            if (isOverdue) {
              notificationTitle = '🚨 期限切れタスク！';
              notificationBody = `「${taskContent}」の期限が過ぎています！`;
              sendNotification(taskId, notificationTitle, notificationBody);
            } else if (isDueSoon) {
              notificationTitle = '⏰ 期限間近のタスク';
              notificationBody = `「${taskContent}」の期限が24時間以内です。`;
              sendNotification(taskId, notificationTitle, notificationBody);
            }
          });
        }
        // --- End of Notification JavaScript ---


        // --- Calendar JavaScript ---
        const calendarGrid = document.getElementById('calendarGrid');
        const currentMonthYear = document.getElementById('currentMonthYear');
        const prevMonthBtn = document.getElementById('prevMonth');
        const nextMonthBtn = document.getElementById('nextMonth');
        const selectedDateHeader = document.getElementById('selectedDateHeader');
        const selectedDateTasksList = document.getElementById('selectedDateTasksList');
        const noTasksMessage = document.getElementById('noTasksMessage');
        const allTasksList = document.getElementById('all-tasks-list'); // UL element for all tasks

        let currentMonth = new Date().getMonth();
        let currentYear = new Date().getFullYear();
        let selectedDate = null; // Selected date (YYYY-MM-DD format)

        // Get all task data (read data attributes from LI elements)
        const allTasksData = Array.from(allTasksList.children).map(li => {
            return {
                id: li.dataset.taskId,
                content: li.dataset.taskContent,
                dueDate: li.dataset.dueDate, // YYYY-MM-DD format
                isCompleted: li.dataset.isCompleted === 'true',
                html: li.outerHTML // Save the entire LI element's HTML
            };
        });

        function generateCalendar() {
            calendarGrid.innerHTML = ''; // Clear calendar
            const firstDayOfMonth = new Date(currentYear, currentMonth, 1);
            const lastDayOfMonth = new Date(currentYear, currentMonth + 1, 0);
            const daysInMonth = lastDayOfMonth.getDate();
            const firstDayOfWeek = firstDayOfMonth.getDay(); // 0:Sun, 1:Mon, ..., 6:Sat

            currentMonthYear.textContent = `${currentYear}年${currentMonth + 1}月`;

            // Empty cells for previous month
            for (let i = 0; i < firstDayOfWeek; i++) {
                const emptyDay = document.createElement('div');
                emptyDay.classList.add('calendar-day', 'empty');
                calendarGrid.appendChild(emptyDay);
            }

            // Date cells for current month
            for (let day = 1; day <= daysInMonth; day++) {
                const dayElement = document.createElement('div');
                dayElement.classList.add('calendar-day');
                dayElement.textContent = day;

                const fullDate = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;

                // Check if it's today
                const today = new Date();
                const todayFormatted = `${today.getFullYear()}-${String(today.getMonth() + 1).padStart(2, '0')}-${String(today.getDate()).padStart(2, '0')}`;
                if (fullDate === todayFormatted) {
                    dayElement.classList.add('today');
                }

                // Check if there are tasks for that day
                const tasksForDay = allTasksData.filter(task => task.dueDate === fullDate && !task.isCompleted);
                if (tasksForDay.length > 0) {
                    dayElement.classList.add('has-tasks');
                }

                dayElement.dataset.date = fullDate; // Save in YYYY-MM-DD format data attribute

                dayElement.addEventListener('click', function() {
                    // Reset style of previously selected date
                    const previouslySelected = document.querySelector('.calendar-day.selected');
                    if (previouslySelected) {
                        previouslySelected.classList.remove('selected');
                    }
                    // Apply style to newly selected date
                    dayElement.classList.add('selected');
                    selectedDate = fullDate; // Update selected date
                    displayTasksForSelectedDate(selectedDate);
                });
                calendarGrid.appendChild(dayElement);
            }

            // Set today's date as selected on initial display
            if (!selectedDate) {
                const todayElement = calendarGrid.querySelector('.calendar-day.today');
                if (todayElement) {
                    todayElement.click(); // Trigger click event to set as selected
                } else {
                    // If today's date is not in the current month (e.g., after moving months), select the 1st
                    const firstDayElement = calendarGrid.querySelector('.calendar-day:not(.empty)');
                    if (firstDayElement) {
                        firstDayElement.click();
                    }
                }
            } else {
                // Try to re-select the previously selected date after moving months
                const elementToSelect = calendarGrid.querySelector(`[data-date="${selectedDate}"]`);
                if (elementToSelect) {
                    elementToSelect.classList.add('selected');
                    displayTasksForSelectedDate(selectedDate); // Re-display
                } else {
                    // If the previously selected date is not in the current month, select today
                    const todayElement = calendarGrid.querySelector('.calendar-day.today');
                    if (todayElement) {
                        todayElement.click();
                    } else {
                        // If today is also not present, select the 1st
                        const firstDayElement = calendarGrid.querySelector('.calendar-day:not(.empty)');
                        if (firstDayElement) {
                            firstDayElement.click();
                        }
                    }
                }
            }
        }

        function displayTasksForSelectedDate(date) {
            selectedDateHeader.textContent = `${new Date(date).getFullYear()}年${new Date(date).getMonth() + 1}月${new Date(date).getDate()}日のタスク`;
            selectedDateTasksList.innerHTML = ''; // Clear list

            const tasksToShow = allTasksData.filter(task => task.dueDate === date);

            if (tasksToShow.length > 0) {
                noTasksMessage.style.display = 'none';
                // Sort completed tasks to the end
                tasksToShow.sort((a, b) => (a.isCompleted === b.isCompleted) ? 0 : a.isCompleted ? 1 : -1);

                tasksToShow.forEach(task => {
                    // Insert the LI element's HTML directly
                    selectedDateTasksList.insertAdjacentHTML('beforeend', task.html);
                });
            } else {
                noTasksMessage.style.display = 'block';
            }
        }

        // Event listeners for month navigation buttons
        prevMonthBtn.addEventListener('click', function() {
            currentMonth--;
            if (currentMonth < 0) {
                currentMonth = 11;
                currentYear--;
            }
            selectedDate = null; // Reset selection state on month change
            generateCalendar();
        });

        nextMonthBtn.addEventListener('click', function() {
            currentMonth++;
            if (currentMonth > 11) {
                currentMonth = 0;
                currentYear++;
            }
            selectedDate = null; // Reset selection state on month change
            generateCalendar();
        });

        // Initial calendar generation and notification check
        generateCalendar();
        checkAndNotifyTasks();
        // --- End of Calendar JavaScript ---


        // --- Tag Selection UI JavaScript ---
        const availableTagsContainer = document.getElementById('availableTagsContainer');
        const selectedTagsContainer = document.getElementById('selectedTagsContainer');
        const hiddenTagsInput = document.getElementById('hiddenTagsInput');

        let selectedTagIds = new Set(); // Use Set to prevent duplicate tag IDs

        // Store allTags data passed from EJS into a JavaScript variable
        const allTagsData = <%- JSON.stringify(allTags) %>;

        // Function to render available tags
        function renderAvailableTags() {
            availableTagsContainer.innerHTML = ''; // Clear container
            allTagsData.forEach(tag => {
                const tagItem = document.createElement('span');
                tagItem.classList.add('available-tag-item');
                tagItem.dataset.tagId = tag.id;
                tagItem.dataset.tagName = tag.name;
                tagItem.dataset.tagColor = tag.color;
                tagItem.style.backgroundColor = tag.color;
                tagItem.style.color = getContrastColor(tag.color);
                tagItem.textContent = tag.name;

                // Add 'selected' class if the tag is already chosen
                if (selectedTagIds.has(tag.id)) {
                    tagItem.classList.add('selected');
                }

                tagItem.addEventListener('click', function() {
                    toggleTagSelection(tag.id, tag.name, tag.color);
                });
                availableTagsContainer.appendChild(tagItem);
            });
            renderSelectedTags(); // Render selected tags after available tags are rendered
        }

        // Function to render selected tags
        function renderSelectedTags() {
            selectedTagsContainer.innerHTML = ''; // Clear container
            selectedTagIds.forEach(tagId => {
                const tag = allTagsData.find(t => t.id === tagId);
                if (tag) {
                    // Add to DOM without updating the Set again (updateSet = false)
                    addTagToSelection(tag.id, tag.name, tag.color, false); 
                }
            });
            updateHiddenTagsInput(); // Update hidden input field
        }

        // Function to toggle tag selection (add/remove)
        function toggleTagSelection(tagId, tagName, tagColor) {
            const tagIdNum = parseInt(tagId, 10); // Ensure it's a number
            if (selectedTagIds.has(tagIdNum)) {
                // If already selected, remove
                removeTagFromSelection(tagIdNum);
            } else {
                // If not selected, add
                addTagToSelection(tagIdNum, tagName, tagColor, true); // Update Set
            }
            // Update the display of available tags to reflect selection state
            renderAvailableTags(); // This will also call renderSelectedTags
        }

        // Function to add a selected tag
        function addTagToSelection(tagId, tagName, tagColor, updateSet = true) {
            if (updateSet && selectedTagIds.has(tagId)) {
                return;
            }
            if (updateSet) {
                selectedTagIds.add(tagId);
            }

            const tagItem = document.createElement('span');
            tagItem.classList.add('selected-tag-item');
            tagItem.dataset.tagId = tagId; // Store as string
            tagItem.style.backgroundColor = tagColor;
            tagItem.style.color = getContrastColor(tagColor);
            tagItem.innerHTML = `
                ${tagName}
                <button type="button" class="remove-tag-btn" data-tag-id="${tagId}">&times;</button>
            `;
            selectedTagsContainer.appendChild(tagItem);
            if (updateSet) {
                updateHiddenTagsInput();
            }
        }

        // Function to remove a selected tag
        function removeTagFromSelection(tagId) {
            selectedTagIds.delete(tagId);
            const tagItemToRemove = selectedTagsContainer.querySelector(`.selected-tag-item[data-tag-id="${tagId}"]`);
            if (tagItemToRemove) {
                selectedTagsContainer.removeChild(tagItemToRemove);
            }
            updateHiddenTagsInput();
        }

        // Function to update the hidden input field
        function updateHiddenTagsInput() {
            hiddenTagsInput.value = Array.from(selectedTagIds).join(',');
        }

        // Helper function to determine contrast color for text
        function getContrastColor(hexcolor) {
            // Convert HEX to RGB
            const r = parseInt(hexcolor.substr(1, 2), 16);
            const g = parseInt(hexcolor.substr(3, 2), 16);
            const b = parseInt(hexcolor.substr(5, 2), 16);

            // Calculate luminance (YIQ formula)
            const yiq = ((r * 299) + (g * 587) + (b * 114)) / 1000;
            return (yiq >= 128) ? 'black' : 'white';
        }

        // Event listener for removing selected tags (event delegation)
        selectedTagsContainer.addEventListener('click', function(event) {
            if (event.target.classList.contains('remove-tag-btn')) {
                const tagId = parseInt(event.target.dataset.tagId, 10);
                removeTagFromSelection(tagId);
                renderAvailableTags(); // Update available tags display to unselect
            }
        });

        // Ensure hiddenTagsInput is updated on form submission
        document.getElementById('addTaskForm').addEventListener('submit', function() {
            updateHiddenTagsInput();
        });

        // Initial rendering of available tags
        renderAvailableTags();
        // --- End of Tag Selection UI JavaScript ---
      });
    </script>
  </body>
</html>
